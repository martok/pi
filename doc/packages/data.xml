<package name="Data">
<description>Das Package stellt Funktionen zum Arbeiten mit Dateien zur Verfügung.</description>
	<function name="pwd">
		<syntax>Pwd()</syntax><description>
		Zeigt das aktuelle Verzeichnis an
	</description></function>
	<function name="cwd">
		<syntax>Cwd(<v>path</v>)</syntax><description>
		Wechselt in <v>path</v> (kann auch eine relative Angabe sein)
	</description></function>
	<function name="glob">
		<syntax>Glob(<v>filter</v>)</syntax><description>
		Erstellt eine Liste aller auf die Maske <v>filter</v> passenden Dateien im aktuellen Verzeichnis. <v>filter</v> kann auch ein Unterverzeichnis oder eine Absolutangabe beschreiben.
	</description></function>
	<function name="Import">
		<syntax>Import(<v>file[,options]</v>)</syntax><description>
		Importiert Daten aus einer Datei.
		</description>
		
		<options>
			<option name="Format" default="*undefined*"><description><seealso p="data" n="ImportExportFormats">Datenformat</seealso>. Wenn nicht angegeben, aus dem Dateinamen ermittelt.</description></option>
		</options>
	</function>
	<function name="ImportString">
		<syntax>ImportString(<v>string[,options]</v>)</syntax><description>
		Importiert Daten aus einem String.
		</description>
		
		<options>
			<option name="Format" default="*undefined*"><description><seealso p="data" n="ImportExportFormats">Datenformat</seealso>. Muss angegeben werden.</description></option>
		</options>
	</function>
	<function name="Export">
		<syntax>Export(<v>file, data[,options]</v>)</syntax><description>
		Exportiert Daten in eine Datei.
		</description>
		
		<options>
			<option name="Format" default="*undefined*"><description><seealso p="data" n="ImportExportFormats">Datenformat</seealso>. Wenn nicht angegeben, aus dem Dateinamen ermittelt.</description></option>
		</options>
	</function>
	<function name="ExportString">
		<syntax>ExportString(<v>data[,options]</v>)</syntax><description>
		Exportiert Daten in einen String.
		</description>
		
		<options>
			<option name="Format" default="*undefined*"><description><seealso p="data" n="ImportExportFormats">Datenformat</seealso>. Muss angegeben werden.</description></option>
		</options>
	</function>
	<function name="csvsave">
		<syntax>CsvSave(<v>file,list[,options]</v>)</syntax><description>
		Alias für <seealso p="data" n="Export">Export</seealso>(<v>file</v>, <v>list</v>, format='CSV', <v>options</v>)
		</description>
	</function>
	<function name="csvload">
		<syntax>CsvLoad(<v>file[,options]</v>)</syntax><description>
		Alias für <seealso p="data" n="Import">Import</seealso>(<v>file</v>, format='CSV', <v>options</v>)
		</description>
	</function>
	<function name="ImportExportFormats"><description>
		Unterstützte werden folgende Datenformate.
		</description>
		<syntax>String</syntax><description>
		Gesamte Datei als ein String.
		</description>
		<syntax>Text (.txt, .log)</syntax><description>
		Datei Zeilenweise. 
		</description>
		<syntax>CSV (.csv)</syntax><description>
		CSV-Datei.
		</description>
		<options>
			<option name="Delimiter" default="';'"><description>[I,E] Feldtrenner</description></option>
			<option name="QuoteChar" default="'&quot;'"><description>[I,E] Gruppierungszeichen</description></option>
			<option name="Decimal" default="'.'"><description>[I,E] Dezimaltrenner</description></option>
			<option name="Skip" default="0"><description>[I] Anzahl zu überspringender Zeilen (z.b. Überschrift)</description></option>
			<option name="Count" default="Max"><description>[I] Maximale Anzahl zu ladender Zeilen</description></option>
			<option name="IgnoreEmpty" default="*undefined*"><description>[I] Leere Felder ignorieren (führt zum Gruppieren von Trennzeichen)</description></option>
			<option name="AlwaysQuote" default="*undefined*"><description>[E] Quote immer verwenden, sonst nur wenn Metazeichen im Eintrag vorkommen</description></option>
		</options>
	</function>
	<function name="source">
		<syntax>Source(<v>file</v>)</syntax><description>
		Lädt eine Datei und führt sie Zeilenweise aus. Tritt ein Fehler auf, wird die Ausführung beendet.
		Die Dateiendung .pi wird automatisch ergänzt, falls <v>file</v> nicht gefunden wird.
	</description></function>
	<function name="table">
		<syntax>Table(<v>list</v>)</syntax><description>
		Stellt eine Liste (oder Liste von Listen) als Tabelle dar
	</description></function>
	<function name="bucket">
		<syntax>Bucket(<v>list</v>, <v>min</v>, <v>max</v>, <v>count</v>)</syntax><description>
		Zählt alle Werte in <v>min</v> &lt; x &lt; <v>max</v> in <v>count</v> Gruppen.
		Rückgabe: Liste von {Mittelwert, Anzahl}
	</description></function>
	<function name="max">
		<syntax>Max(<v>list</v>)</syntax><description>
		Größter Wert einer Liste
	</description></function>
	<function name="min">
		<syntax>Min(<v>list</v>)</syntax><description>
		Kleinster Wert einer Liste
	</description></function>
	<function name="sortby">
		<syntax>SortBy(<v>list</v>, <v>var</v>, <v>expr</v>)</syntax><description>
		Sortiert <v>list</v> unter verwendung der Schlüssel, wie sie <v>expr</v> generiert.
		</description>
		<options>
			<option name="Desc" default="*undefined*">
				<description>Absteigend sortieren, sonst Aufsteigend</description>		
			</option>
			<option name="String" default="*undefined*">
				<description>Als Text sortieren, sonst als Zahl</description>
			</option>
		</options>
	</function>
	<function name="numderive">
		<syntax>NumDerive(<v>list</v>)</syntax><description>
		Numerische Ableitung einer Liste von {X,Y}-Punkten. In der Mitte zwischen zwei X-Werten wird die Differenz
		nach dY/dY abgelegt. Die erzeugte Liste ist ein Element kürzer.
	</description></function>
	<function name="smooth">
		<syntax>Smooth(<v>list</v>)</syntax><description>
		Glätten einer Liste von {X,Y}-Punkten.
		</description>
	</function>
</package>