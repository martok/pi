<?xml version="1.0"?>
<!DOCTYPE
   document
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
   [
      <!ENTITY Pi  "&#0928;">
   ]
>
<document xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>pi - Matheparser/Taschenrechner</title>
	<section title="Über das Projekt &Pi;">
		Offizielles Repository: <a href="https://github.com/martok/pi">GitHub</a>.<br/>
		Projekt-Thread in der Entwickler-Ecke: <a href="http://www.entwickler-ecke.de/viewtopic.php?t=106298">pi - Matheparsertaschenrechner</a>
	</section>
	<section title="Syntax">
		<p>Gleichungen eben ;)</p>

		<p>Eine Besonderheit ist, dass mit dem Definition-Operator (<code>:=</code>) Ausdrücke
		direkt ohne Auswertung gespeichert werden können. Diese kann man dann durch eine
		spezielle Art des Funktionsaufrufs verwenden: Eckige Klammern führen eine Expression
		mit neuem Kontext aus, der durch die Ausdrücke in der Klammer vorbereitet werden
		kann.</p>
	</section>
	<section title="Operatoren">
		<p>Operatoren können auch durch Packages definiert werden. Eine Reihe ist jedoch immer definiert:
		</p>
		<ul>
			<li id="operator-describe">
				<code>?</code>
				Describe. Gibt die FullForm seines Arguments aus
			</li>
			<li id="operator-dump">
				<code>??</code>
				Dump. Gibt die interne Datenstruktur des unevaluierten Arguments aus.
			</li>
			<li id="operator-char">
				<code>#</code>
				Character. Ein Zeichen aus seinem ASCII-Code erzeugen
			</li>
			<li id="operator-power">
				<code>^</code>
				Power. Berechnet x^y
			</li>
			<li id="operator-muldiv">
				<code>* / %</code>
				Multiplication, Division, Modulus
			</li>
			<li id="operator-addsub">
				<code>+ -</code>
				Addition, Subtraktion
			</li>
			<li id="operator-assign">
				<code>=</code>
				Assignment. Weist der linken Seite <b>den Wert</b> der rechten Seite zu
			</li>
			<li id="operator-definition">
				<code>:=</code>
				Definition. Weist der linken Seite <b>den Ausdruck</b> auf der rechten Seite zu
			</li>
			<li id="operator-list">
				<code>{ }</code>
				List. Erzeugt eine Liste. Identisch zu <seealso p="lists" n="l">L()</seealso>
			</li>
			<li id="operator-listaccess">
				<code>@</code>
				ListAccess. Identisch zu <seealso p="lists" n="lget">LGet()</seealso>
			</li>
			<li id="operator-compound">
				<code>;</code>
				Compound. Trennt Ausdrücke, die der Reihe nach ausgeführt werden. Der Wert des letzten Ausdrucks wird zurückgegeben. Dieser kann leer sein.
			</li>
			<li id="operator-function">
				<code>-></code>
				Function. Wird in der Definition von Funktionen verwendet, um eine automatische Parameterzuordnung zu realisieren: <code>f:= {a} -> a*2</code>.
			</li>
			<li id="operator-unit">
				<code>_</code>
				Unit. Identisch zu <seealso p="dimensons" n="unit">Unit()</seealso>
			</li>
		</ul>
	</section>
	<section title="Datentypen">
		<dl>
			<dt><code>Unassigned</code></dt>
			<dd>Kein Wert zugewiesen (wird intern verwendet; Darstellung: &lt;?&gt;)</dd>

			<dt><code>Null</code></dt>
			<dd>Nullwert</dd>

			<dt><code>Integer</code></dt>
			<dd>64bit Integer (long long)<br/>
			-2^63 .. 2^64-1</dd>

			<dt><code>Float</code></dt>
			<dd>80bit Extended (long double)<br/>
			3.6 x 10^-4951 bis 1.1 x 10^4932 bei 19–20 stelliger Genauigkeit</dd>

			<dt><code>FloatDimension</code></dt>
			<dd>Wie <code>Float</code>, jedoch mit physikalischer Dimension</dd>

			<dt><code>String</code></dt>
			<dd>Ansi-String</dd>

			<dt><code>RangeList</code></dt>
			<dd>Bereich, Darstellung: {Enfang->Ende, Schrittweite}</dd>

			<dt><code>FixedList</code></dt>
			<dd>Liste mehrerer Werte, Darstellung: {el1,el2,el3}</dd>
		</dl>
	</section>
	<section title="Ausdrücke, Werte und Variablen">
		<p>Alles, was (syntaktisch korrekt) eingegeben werden kann wird als Ausdruck
		bezeichnet. Das Umfasst sowohl mathematische Ausdrücke ("Formeln") als auch
		Funktionsaufrufe, Listen etc. Um herauszufinden, wie ein Ausdruck definiert
		ist kann der <a href="#operator-describe">Describe-Operator</a> <code>?</code> verwendet
		werden. Dieser verwendet die FullForm der Ausdrücke, die den Ausdruck
		als Baum der beteiligten Funktionen beschreibt.</p>
		<p>In &Pi; ist es möglich, Ausdrücke ohne vorherige Zuweisung an eine
		Variable zu verwenden. Darüber hinaus sind weitergehende Zuweisungen möglich.</p>
		<p>Statische Zuweisungen mit <code>=</code> legen den Wert der sich bei der
		Auswertung des Ausdrucks auf der rechten Seite in der Variable im aktuellen
		Kontext ab. Dies kann also z.B. ein Zahlenwert sein.<br/>
		Diese Syntax wird außerdem von manchen Funktionen verwendet, um Konfigurationsparameter
		angeben zu können und so das Verhalten der Funktionen zu beeinflussen.</p>
		<p>Dynamische Zuweisungen mit <code>:=</code> werten den Ausdruck nicht aus
		sondern speichern den Ausdruck selbst. Dieser kann dann später ausgewertet
		oder in weiteren dynamischen Zuweisungen verwendet werden. Das ermöglicht es,
		eine Funktion zu definieren und wiederholt für verschiedene Parameter
		aufzurufen.</p>
	</section>
	<section title="Einheiten">
		<p>&Pi; unterstützt das Rechnen mit Einheiten direkt auf Ebene der algebraischen Funktionen.
		Dazu kann an einen Wert über den <a href="#operator-unit">Einheiten-Operator</a> <code>_</code> ein
		Einheitenstring angehängt werden. Dabei stehen mehrere Schreibweisen zur Verfügung: Verwendung
		genau eines Bruchstrichs, Exponenten mit und ohne Potenzzeichen sowie Präfixe der Basis 10 von yocto bis yotta.
		Diese können optional mit einem Doppelpunkt abgetrennt werden. Ist eine Auflösung nicht eindeutig möglich,
		wird dieser zwingend erforderlich: <code>nmi</code>=Seemeilen, aber <code>n:mi</code>=Nano-Meilen</p>
		<p>Die Grundrechenarten sowie Wurzeln und Potenzen und einige weitere Funktionen beachten Einheiten
		physikalisch korrekt. Jede andere Funktion wird einen dimensionierten Wert immer so behandeln
		wie eine einfache Zahl mit dem Anzeigewert. <code>1_'km/h'</code> wird also wie 1 behandelt,
		obwohl der Grundwert in SI-Einheiten ungefähr <code>0.277 m/s</code> entsprechen würde.</p>
		<p>Der <code>_</code>-Operator ist als normaler Operator auch auf Variablen anwendbar, muss dann
		allerdings mit einem Leerzeichen abgetrennt werden. So kann man z.B. einfach Umrechnungen durchführen.</p>
	</section>
	<section title="Funktionen">
		<p>Funktionen sind in sogenannten Packages organisiert. Jedes dieser Packages
		stellt eine Einheit von Funktionen ähnlicher Kategorie dar.</p>
		<xi:include href="./packages/core.xml" parse="xml"/>
		<xi:include href="./packages/trig.xml" parse="xml"/>
		<xi:include href="./packages/elementary.xml" parse="xml"/>
		<xi:include href="./packages/numerical.xml" parse="xml"/>
		<xi:include href="./packages/lists.xml" parse="xml"/>
		<xi:include href="./packages/data.xml" parse="xml"/>
		<xi:include href="./packages/string.xml" parse="xml"/>
		<xi:include href="./packages/statistics.xml" parse="xml"/>
		<xi:include href="./packages/graph.xml" parse="xml"/>
		<xi:include href="./packages/symbolics.xml" parse="xml"/>
		<xi:include href="./packages/dimensions.xml" parse="xml"/>
	</section>
	<section title="License">
		<pre><xi:include href="license.txt" parse="text"/></pre>
	</section>
</document>
